// Generates normal sample following Box Muller Algorithm
var norm = function(mu, sigma, num){
  var U1, U2, x, z;
  var sample = [];

  if (num <=0 || sigma <=0){
    return sample;
  }

  if (typeof num === 'undefined' || num == 1 ||(num % 1) != 0){
    U1 = Math.random();
    U2 = Math.random();
    z = Math.sqrt(-2*Math.log(U1))*Math.cos(2*U2*Math.PI);
    x = mu + (sigma*z);
    return x;
  }

  for (var i=0; i<num; i++){
    U1 = Math.random();
    U2 = Math.random();
    z = Math.sqrt(-2*Math.log(U1))*Math.cos(2*U2*Math.PI);
    x = mu + (sigma*z);
    sample.push(x);
  }
  return sample;
}

// B(t) = mu*t + sigma*W(t), W(t) ~ norm(0,sqrt(t))
var brown = function (mu, sigma, T, steps, path){
  var B_t = [0];
  var B = 0;
  var dt = T/steps;
  var dB;

  if (!(T>0) || !(steps>0)){
    return B_t;
  }

  if (path == false){
    return ((mu*T) + (sigma * norm(0,Math.sqrt(T))));
  }
  else{
    for (var i=0; i<steps; i++){
      dB = (mu * dt) + (sigma * norm(0,Math.sqrt(dt)));
      B += dB;
      B_t.push(B);
    }
    return B_t;
  }
}
