{
  "name": "stochastic",
  "version": "0.0.11",
  "description": "Simple functions for simulating Poisson Processes, Brownian motion, geometric Brownian motion, discrete/continuous-time Markov chains, and normal random variables",
  "main": "index.js",
  "keywords": [
    "stochastic",
    "histogram",
    "Markov",
    "probability",
    "Brownian",
    "Normal",
    "Poisson"
  ],
  "author": {
    "name": "Nathan Epstein",
    "email": "ne2210@columbia.edu"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/NathanEpstein/stochastic.git"
  },
  "readme": "stochastic\n==========\n\n![Geometric Brownian Motion](https://raw.githubusercontent.com/NathanEpstein/stochastic/master/GBM.png)\n\n## Install\n`npm install stochastic --save`\n\n\n## Usage\n```javascript\nvar stoch = require('stochastic');\n\nvar normalArray = stoch.norm(mu,sigma,num);\n\nvar brownianMotion = stoch.brown(mu, sigma, T, steps, path);\n\nvar geometricBrownianMotion = stoch.GBM(S0, mu, sigma, T, steps, path);\n\nvar discreteMarkovChain = stoch.DTMC(transMatrix, steps, start, path);\n\nvar continuousMarkovChain = stoch.CTMC(transMatrix, T, start, path);\n\nvar poissonProcess = stoch.poissP(lambda, T, path);\n\nvar sample = stoch.sample(array, num);\n\nvar histogram = stoch.hist(array);\n\nvar exp = stoch.exp(lambda);\n\nvar pareto = stoch.pareto(x_m,alpha);\n\n```\n\n## Extended Usage Notes\n### stoch.norm(mu, sigma, num)\n\nReturns an array with num i.i.d normal random variables (http://en.wikipedia.org/wiki/Normal_distribution) of mean mu and standard deviation sigma.\n\nParameters: mu is a real number, sigma is a strictly positive real number, and num is a positive integer (defaults to 1).\n\n### stoch.brown(mu, sigma, T, steps, path)\n\nReturns an array corresponding to the path of Brownian motion (http://en.wikipedia.org/wiki/Wiener_process#Related_processes) from time 0 to T with drift parameter mu and volatility parameter sigma (the process is initialized to be 0). The i-th entry in the array corresponds to the Brownian process at time i * (T/steps).\n\nParameters: mu is a real number, sigma is a strictly positive real number, T is a strictly positive real number, steps is a positive integer, and path is a boolean. If path is false, returns only the value of the Brownian process at time T (defaults to true).\n\n### stoch.GBM(S0, mu, sigma, T, steps, path)\n\nReturns an array corresponding to the path of geometric Brownian motion (http://en.wikipedia.org/wiki/Geometric_Brownian_motion) from time 0 to T with drift parameter mu and volatility parameter sigma (the process is initialized to be S0). The i-th entry in the array corresponds to the geometric Brownian process at time i * (T/steps).\n\nParameters: S0 is a strictly positive real number, mu is a real number, sigma is a strictly positive real number, T is a strictly positive real number, steps is a positive integer, and path is a boolean. If path is false, returns only the value of the geometric Brownian process at time T (defaults to true).\n\n### stoch.DTMC(transMatrix, steps, start, path)\n\nReturns an array with the states at each step of the discrete-time Markov Chain (http://en.wikipedia.org/wiki/Markov_chain) given by transMatrix (2-d array). The number of transitions is given by steps. The initial state is given by start (the states are indexed from 0 to n-1 where n is the number of arrays in transMatrix).\n\nParameters: transMatrix is a symmetric 2-d array, steps is a positive integer, start is a non-negative integer, and path is a boolean. If path is false, returns only the value of the final state (defaults to true).\n\n### stoch.CTMC(transMatrix, T, start, path)\n\nReturns an object with the {key:value} pair {time:state} at each step of the continuous-time Markov Chain (http://en.wikipedia.org/wiki/Continuous-time_Markov_chain) given by transMatrix (2-d array). The Markov Chain is simulated until time T. The initial state is given by start (the states are indexed from 0 to n-1 where n is the number of arrays in transMatrix).\n\nParameters: transMatrix is a symmetric 2-d array, T is a strictly positive real number, start is a non-negative integer, and path is a boolean. If path is false, returns only the value of the final state (defaults to true).\n\n### stoch.poissP(lambda, T, path)\n\nReturns an array with the times of each arrival in a Poisson Process (http://en.wikipedia.org/wiki/Poisson_process) with rate lambda until time T.\n\nParameters: lambda is a strictly positive real number, T is a strictly positive real number, and path is a boolean. If path is false, returns only the number of arrivals (defaults to true).\n\n### stoch.sample(arr, n)\n\nGenerates a random sample (with replacement) from a user input array of observations. Number of observations is specified by the user.\n\nParameters: arr is an array of values and n is a positive integer designating the number of observations.\n\n\n### stoch.hist(arr)\n\nGenerates a histogram object from an array of data. Keys denote the lower bound of each bin and the values indicate the frequency of data in each bin.\n\nParameters: arr is an array of numeric values.\n\n###stoch.exp(lambda)\n\nGenerates an exponential random variable with rate parameter lambda.\n\nParameters: lambda is a positive real number.\n\n###stoch.pareto(x_m,alpha)\n\nGenerates a pareto random variables with paramters x_m and alpha.\n\nParameters: x_m is a positive real number and alpha is a real number.\n\n## License\n\n**The MIT License (MIT)**\n\n> Copyright (c) 2014 Nathan Epstein\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "gitHead": "caea541c3e50d37ff8d57be5186349fbdad7130d",
  "bugs": {
    "url": "https://github.com/NathanEpstein/stochastic/issues"
  },
  "homepage": "https://github.com/NathanEpstein/stochastic",
  "_id": "stochastic@0.0.11",
  "scripts": {},
  "_shasum": "91c74fae2a0d414d8e41c438f35692d799ff0962",
  "_from": "stochastic@"
}
